openapi: 3.0.0
info:
  title: NestJS Auth and File API
  description: |
    API for user authentication and file management with JWT tokens
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local development server
tags:
  - name: Authentication
    description: User authentication operations
  - name: File Management
    description: File operations
paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Email or phone number as ID
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Bad request (validation error or user already exists)
  
  /signin:
    post:
      tags:
        - Authentication
      summary: Authenticate user and receive tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Email or phone number as ID
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials
  
  /signin/new_token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid or expired refresh token
  
  /logout:
    get:
      tags:
        - Authentication
      summary: Logout user and revoke token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
  
  /info:
    get:
      tags:
        - Authentication
      summary: Get current user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  
  /file/upload:
    post:
      tags:
        - File Management
      summary: Upload a file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          description: Unauthorized
  
  /file/list:
    get:
      tags:
        - File Management
      summary: Get a paginated list of files
      security:
        - BearerAuth: []
      parameters:
        - name: list_size
          in: query
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                      list_size:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
  
  /file/{id}:
    get:
      tags:
        - File Management
      summary: Get file information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          description: Unauthorized
        '404':
          description: File not found
  
  /file/download/{id}:
    get:
      tags:
        - File Management
      summary: Download a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: File not found
  
  /file/update/{id}:
    put:
      tags:
        - File Management
      summary: Update a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          description: Unauthorized
        '404':
          description: File not found
  
  /file/delete/{id}:
    delete:
      tags:
        - File Management
      summary: Delete a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: File not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Email or phone number as ID
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    
    File:
      type: object
      properties:
        id:
          type: integer
        originalName:
          type: string
        filename:
          type: string
        path:
          type: string
        mimetype:
          type: string
        extension:
          type: string
        size:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true